import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { ChatMessage, ApiResponse } from '../types/chat';

const ChatPage: React.FC = () => {
  const navigate = useNavigate();
  const [messages, setMessages] = useState<ChatMessage[]>([
    { text: '–Ø ‚Äî –°–∞—à–∞, –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏. \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –æ—Ç–∫—É–¥–∞, –∫—É–¥–∞ –∏ –∫–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è, –¥–∞–∂–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–ª–æ–∂–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤, –∏ —è —Å–º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –ø–æ–∫—É–ø–∫–æ–π –±–∏–ª–µ—Ç–æ–≤!\n\n–£—á—Ç–∏, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ 3-—Ö –≤–∏–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: –∞–≤—Ç–æ–±—É—Å–∞, —Å–∞–º–æ–ª–µ—Ç–∞ –∏ –ø–æ–µ–∑–¥–∞', isBot: true }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const handleNavigateHome = () => {
    document.body.style.opacity = '0';
    document.body.style.transition = 'opacity 0.3s ease-in-out';
    
    setTimeout(() => {
      navigate('/');
      requestAnimationFrame(() => {
        document.body.style.opacity = '1';
      });
    }, 300);
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–µ–Ω–¥–æ–º
  const mockApiCall = async (message: string): Promise<ApiResponse> => {
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    if (message.toLowerCase().includes('—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥') && message.toLowerCase().includes('–º–æ—Å–∫–≤–∞')) {
      return {
        type: 'schedule',
        objects: [
          {
            type: 'train',
            time_start_utc: Math.floor(Date.now() / 1000) + 86400, // –∑–∞–≤—Ç—Ä–∞
            time_end_utc: Math.floor(Date.now() / 1000) + 86400 + 7200, // +2 —á–∞—Å–∞
            place_start: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
            place_finish: '–¢–≤–µ—Ä—å',
            ticket_url: 'https://example.com/ticket1'
          },
          {
            type: 'bus',
            time_start_utc: Math.floor(Date.now() / 1000) + 86400 + 7200 + 1800, // +30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ–µ–∑–¥–∞
            time_end_utc: Math.floor(Date.now() / 1000) + 86400 + 7200 + 1800 + 3600, // +1 —á–∞—Å
            place_start: '–¢–≤–µ—Ä—å',
            place_finish: '–ú–æ—Å–∫–≤–∞',
            ticket_url: 'https://example.com/ticket2'
          }
        ]
      };
    }
    
    // –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    if (message.toLowerCase().includes('–º–æ—Å–∫–≤–∞') && message.toLowerCase().includes('—Å–æ—á–∏')) {
      return {
        type: 'schedule',
        objects: [
          {
            type: 'plane',
            time_start_utc: Math.floor(Date.now() / 1000) + 86400,
            time_end_utc: Math.floor(Date.now() / 1000) + 86400 + 7200,
            place_start: '–ú–æ—Å–∫–≤–∞',
            place_finish: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
            ticket_url: 'https://example.com/ticket3'
          },
          {
            type: 'bus',
            time_start_utc: Math.floor(Date.now() / 1000) + 86400 + 7200 + 3600,
            time_end_utc: Math.floor(Date.now() / 1000) + 86400 + 7200 + 3600 + 7200,
            place_start: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
            place_finish: '–°–æ—á–∏',
            ticket_url: 'https://example.com/ticket4'
          }
        ]
      };
    }
    
    // –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const responses = [
      '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ö—É–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è?',
      '–ö–∞–∫–∏–µ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏ –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?',
      '–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–µ–∑–¥–∫—É –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?',
      '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –∏–ª–∏ —Å–ø–æ–∫–æ–π–Ω–æ–µ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ?'
    ];
    
    return {
      type: 'message',
      text: responses[Math.floor(Math.random() * responses.length)]
    };
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputValue.trim() || isLoading) return;

    const userMessage = { text: inputValue, isBot: false };
    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      const response = await mockApiCall(inputValue);
      if (response.type === 'message') {
        setMessages(prev => [...prev, { text: response.text, isBot: true }]);
      } else if (response.type === 'schedule') {
        setMessages(prev => [...prev, { 
          text: '–í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞:', 
          isBot: true,
          schedule: response.objects 
        }]);
      }
    } catch (error) {
      console.error('Error getting response:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const formatTime = (timestamp: number) => {
    return new Date(timestamp * 1000).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getTransportIcon = (type: string) => {
    switch (type) {
      case 'plane': return '‚úàÔ∏è';
      case 'train': return 'üöÇ';
      case 'bus': return 'üöå';
      case 'ship': return 'üö¢';
      case 'walk': return 'üö∂';
      default: return 'üöÄ';
    }
  };

  const translateTransportType = (type: string): string => {
    switch (type) {
      case 'plane': return '—Å–∞–º–æ–ª–µ—Ç';
      case 'train': return '–ø–æ–µ–∑–¥';
      case 'bus': return '–∞–≤—Ç–æ–±—É—Å';
      case 'ship': return '–∫–æ—Ä–∞–±–ª—å';
      case 'walk': return '–ø–µ—à–∫–æ–º';
      default: return type;
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      <header className="flex items-center justify-between whitespace-nowrap border-b border-solid border-border px-4 sm:px-10 py-3">
        <div className="flex items-center gap-2 text-secondary">
          <img 
            src="/images/logo-big.png" 
            alt="Axenix" 
            className="h-6 w-auto cursor-pointer hover:opacity-80 transition-opacity" 
            onClick={handleNavigateHome}
          />
          <h2 className="text-lg font-bold leading-tight tracking-[-0.015em]">–ù–∞–≤–∏–≥–∞—Ç–æ—Ä Axenix</h2>
        </div>
      </header>
      <main className="flex-1 px-4 md:px-40 py-5 flex justify-center">
        <div className="w-full max-w-2xl flex flex-col h-[calc(100vh-8rem)]">
          <div className="flex-1 overflow-y-auto space-y-4 scroll-smooth pb-4">
            {messages.map((message, index) => (
              <div key={index} className={`flex items-end gap-3 p-4 ${!message.isBot ? 'flex-row-reverse' : ''}`}>
                {message.isBot && (
                  <div
                    className="bg-center bg-no-repeat aspect-square bg-cover rounded-full w-10 shrink-0"
                    style={{backgroundImage: 'url("/images/logo-small.jpg")'}}
                  />
                )}
                <div className={`flex flex-col gap-1 ${message.isBot ? 'items-start' : 'items-end'} max-w-[80%]`}>
                  {message.isBot && (
                    <p className="text-tertiary text-xs">–ù–∞–≤–∏–≥–∞—Ç–æ—Ä Axenix</p>
                  )}
                  <div className={`rounded-xl px-4 py-3 ${
                    message.isBot ? 'bg-[#f5f1f0] text-secondary' : 'bg-primary text-white'
                  }`}>
                    <p className="text-base break-words whitespace-pre-wrap">{message.text}</p>
                  </div>
                  {message.schedule && (
                    <div className="w-full space-y-2 mt-2">
                      {message.schedule.map((item, idx) => (
                        <div key={idx} className="bg-white rounded-xl p-4 border border-[#e6dedb]">
                          <div className="flex items-center gap-2 mb-2">
                            <span className="text-2xl">{getTransportIcon(item.type)}</span>
                            <span className="text-secondary font-medium capitalize">{translateTransportType(item.type)}</span>
                          </div>
                          <div className="flex justify-between items-center text-sm">
                            <div className="flex flex-col">
                              <span className="text-secondary font-medium">{item.place_start}</span>
                              <span className="text-tertiary">{formatTime(item.time_start_utc)}</span>
                            </div>
                            <div className="h-px flex-1 bg-[#e6dedb] mx-4"></div>
                            <div className="flex flex-col items-end">
                              <span className="text-secondary font-medium">{item.place_finish}</span>
                              <span className="text-tertiary">{formatTime(item.time_end_utc)}</span>
                            </div>
                          </div>
                          <a 
                            href={item.ticket_url} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="mt-3 block text-center py-2 px-4 bg-primary text-white rounded-lg hover:bg-opacity-90 transition-all"
                          >
                            –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç
                          </a>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>

          <form onSubmit={handleSubmit} className="sticky bottom-0 bg-white px-4 py-3 border-t border-border mt-auto">
            <div className="flex items-center gap-3">
              <div className="flex-1 relative">
                <input
                  placeholder="–ò–∑ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞"
                  className="w-full h-12 px-4 rounded-xl bg-[#f5f1f0] text-secondary placeholder-tertiary focus:outline-none"
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  disabled={isLoading}
                />
              </div>
              <button
                type="submit"
                disabled={isLoading}
                className={`min-w-[100px] h-12 px-6 rounded-xl bg-primary text-white font-medium transition-all
                  ${isLoading ? 'opacity-50 cursor-not-allowed' : 'hover:bg-opacity-90'}`}
              >
                {isLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
              </button>
            </div>
          </form>
        </div>
      </main>
    </div>
  );
};

export default ChatPage;